# nert/core/invariant_templates.yaml
# PDDL-Style Safety Specifications
#
# These templates define preconditions and postconditions for robot actions
# using PDDL-inspired predicate notation. They constrain code generation and
# provide verification targets for post-hoc validation.
#
# Format: First-order logic predicates
# Usage: Specification, not planning domain
# Purpose: Guide LLM code generation and verify generated code maintains safety
#
# Note: These are constraint specifications, not a complete PDDL planning domain.
# No automated planner is invoked - these guide code generation and verification.

pddl:
  pickup:
    preconditions:
      - "exists({obj})"
      - "at(robot, {obj})"
      - "gripper_empty()"
    postconditions:
      - "holding({obj})"
      - "not(gripper_empty())"

  place:
    preconditions:
      - "holding({obj})"
      - "at(robot, {destination})"
    postconditions:
      - "{rel}({obj}, {destination})"
      - "not(holding({obj}))"
      - "gripper_empty()"

  navigate:
    preconditions:
      - "path_clear(robot, {destination})"
    postconditions:
      - "at(robot, {destination})"

  open:
    preconditions:
      - "exists({target})"
      - "at(robot, {target})"
      - "not(opened({target}))"
    postconditions:
      - "opened({target})"

  close:
    preconditions:
      - "exists({target})"
      - "at(robot, {target})"
      - "opened({target})"
    postconditions:
      - "not(opened({target}))"

  switch_on:
    preconditions:
      - "exists({target})"
      - "at(robot, {target})"
      - "not(powered_on({target}))"
    postconditions:
      - "powered_on({target})"

  switch_off:
    preconditions:
      - "exists({target})"
      - "at(robot, {target})"
      - "powered_on({target})"
    postconditions:
      - "not(powered_on({target}))"

  slice:
    preconditions:
      - "exists({target})"
      - "at(robot, {target})"
      - "holding(knife)"
      - "not(sliced({target}))"
    postconditions:
      - "sliced({target})"

  break:
    preconditions:
      - "exists({target})"
      - "at(robot, {target})"
      - "not(broken({target}))"
    postconditions:
      - "broken({target})"

  throw:
    preconditions:
      - "holding({obj})"
    postconditions:
      - "not(holding({obj}))"
      - "thrown({obj})"

  push:
    preconditions:
      - "exists({target})"
      - "at(robot, {target})"
    postconditions:
      - "pushed({target})"

  pull:
    preconditions:
      - "exists({target})"
      - "at(robot, {target})"
    postconditions:
      - "pulled({target})"

  drop:
    preconditions:
      - "holding({obj})"
    postconditions:
      - "not(holding({obj})"
      - "gripper_empty()"

ltl_templates:
  safety:
    - "G(¬collision)"
    - "G(¬spilled)"
    - "G(temperature < threshold → distance > safe_distance)"
  
  liveness:
    - "F(task_complete)"
    - "F(at_goal)"
  
  fairness:
    - "G(request → F(response))"